#!/bin/bash
# Video processor setup script with dynamic effects loading
# Version: 2025-03-01

# Set up basic logging
exec > >(tee /var/log/user-data.log) 2>&1
echo "Starting user data script at $(date)"

yum update -y
amazon-linux-extras install -y epel

# Install FFmpeg and development packages
yum -y install ffmpeg ffmpeg-devel

yum groupinstall -y "Development Tools"

yum install -y autoconf automake bzip2 bzip2-devel cmake freetype-devel gcc gcc-c++ git libtool \
    make mercurial pkgconfig zlib-devel nasm yasm libdrm-devel \
    texinfo wget libX11-devel libXext-devel libXfixes-devel libass-devel \
    SDL2-devel lame-devel opus-devel libvpx-devel x264-devel libvorbis-devel

# Create build directory
cd /tmp
mkdir -p ffmpeg_sources

# Install x264 first
cd ffmpeg_sources
git clone --depth 1 https://code.videolan.org/videolan/x264.git
cd x264
./configure --prefix="/usr/local" --enable-static --enable-shared
make
make install

# Update library cache
echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf
ldconfig

# Install FFmpeg with x264 support
cd /tmp/ffmpeg_sources
wget https://ffmpeg.org/releases/ffmpeg-5.1.tar.bz2
tar xjf ffmpeg-5.1.tar.bz2
cd ffmpeg-5.1

PKG_CONFIG_PATH="/usr/local/lib/pkgconfig" ./configure --prefix=/usr/local \
            --enable-gpl \
            --enable-nonfree \
            --enable-libx264 \
            --enable-shared \
            --enable-filters \
            --enable-postproc \
            --enable-avfilter \
            --enable-libass \
            --enable-libfreetype \
            --enable-libvorbis \
            --enable-libvpx \
            --enable-version3 \
            --extra-cflags="-I/usr/local/include" \
            --extra-ldflags="-L/usr/local/lib"
make
make install
ldconfig

# Verify library path
echo "export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> /etc/profile
source /etc/profile

# Install Python dependencies with improved error handling
echo "Installing Python dependencies at $(date)..."
/usr/bin/pip3 install --upgrade pip
if [ $? -ne 0 ]; then
    echo "Failed to upgrade pip, continuing anyway..."
fi

# Install required packages with error checking
echo "Installing boto3 and other Python packages..."
/usr/bin/pip3 install boto3 torch torchvision opencv-python-headless numpy pillow ffmpeg-python tqdm pyyaml
if [ $? -ne 0 ]; then
    echo "Failed to install Python packages using pip3, trying alternative method"
    # Try alternative installation method
    /usr/bin/python3 -m pip install --user boto3
    # Also try system package if available
    yum install -y python3-boto3 || echo "Failed to install python3-boto3 package"
fi

# Verify boto3 installation
if /usr/bin/python3 -c "import boto3; print('boto3 version:', boto3.__version__)" 2>/dev/null; then
    echo "boto3 installed successfully"
else
    echo "WARNING: boto3 still not available after installation attempts"
    # One more attempt with explicit system site packages
    /usr/bin/pip3 install --system boto3
    echo "Final boto3 check:"
    /usr/bin/python3 -c "import boto3; print('boto3 version:', boto3.__version__)" || echo "boto3 STILL not available!"
fi

# Create processor directory structure
mkdir -p /opt/video-processor
mkdir -p /opt/video-processor/effects
mkdir -p /opt/video-processor/effects/core
mkdir -p /opt/video-processor/effects/ffmpeg
mkdir -p /opt/video-processor/effects/neural
mkdir -p /opt/video-processor/model_weights
cd /opt/video-processor

export PATH=/usr/local/bin:$PATH

# Download effect system from S3
echo "---------------------------------------------"
echo "Setting up video processor with dynamic effects: $(date)"
echo "---------------------------------------------"

# Download the effect core module
echo "Downloading effect core module..."
aws s3 cp s3://${bucket_name}/effects/core/effect_core.py /opt/video-processor/effects/core/
chmod +x /opt/video-processor/effects/core/effect_core.py

# Download the processor script
echo "Downloading processor script..."
aws s3 cp s3://${bucket_name}/effects/processor.py /opt/video-processor/
chmod +x /opt/video-processor/processor.py

# Download manifest file
echo "Downloading effects manifest..."
aws s3 cp s3://${bucket_name}/effects/manifest.json /opt/video-processor/effects/

# Download effect modules
echo "Downloading effect modules..."
aws s3 cp s3://${bucket_name}/effects/ffmpeg/silent_movie.py /opt/video-processor/effects/ffmpeg/
aws s3 cp s3://${bucket_name}/effects/ffmpeg/grindhouse.py /opt/video-processor/effects/ffmpeg/
aws s3 cp s3://${bucket_name}/effects/ffmpeg/technicolor.py /opt/video-processor/effects/ffmpeg/
aws s3 cp s3://${bucket_name}/effects/neural/scanner_darkly.py /opt/video-processor/effects/neural/

# Download HED model files
echo "Downloading HED model files for Scanner Darkly effect..."
aws s3 cp s3://${bucket_name}/effects/neural/models/hed.caffemodel /opt/video-processor/model_weights/
aws s3 cp s3://${bucket_name}/effects/neural/models/hed.prototxt /opt/video-processor/model_weights/

# Create symlink for scanner darkly neural implementation
echo "Creating symlink for Scanner Darkly neural implementation..."
ln -s /opt/video-processor/effects/neural/scanner_darkly.py /opt/video-processor/scanner_darkly_neural.py
chmod +x /opt/video-processor/scanner_darkly_neural.py

# Ensure proper permissions
chmod -R 755 /opt/video-processor/effects
chmod -R 755 /opt/video-processor/model_weights

# Create processor service script with expanded PYTHONPATH
cat > /etc/systemd/system/video-processor.service << EOF
[Unit]
Description=Video Processor Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/video-processor
Environment=PYTHONPATH=/opt/video-processor:/usr/local/lib/python3.7/site-packages:/usr/lib/python3/dist-packages:/usr/lib/python3.7/site-packages
Environment=BUCKET_NAME=${bucket_name}
Environment=QUEUE_URL=${queue_url}
ExecStart=/usr/bin/python3 /opt/video-processor/processor.py
Restart=always
RestartSec=3
StandardOutput=append:/var/log/video-processor.log
StandardError=append:/var/log/video-processor.log

[Install]
WantedBy=multi-user.target
EOF

# Create log file
touch /var/log/video-processor.log
chmod 666 /var/log/video-processor.log

# Enable and start the service
systemctl enable video-processor.service
systemctl start video-processor.service

# Check service status
echo "Service status:"
systemctl status video-processor.service

echo "Video processor setup complete at $(date)!"